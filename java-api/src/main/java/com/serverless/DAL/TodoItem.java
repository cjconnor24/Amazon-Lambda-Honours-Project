package com.serverless.DAL;


import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.sun.tools.javac.comp.Todo;
import org.apache.log4j.Logger;


import java.util.HashMap;
import java.util.List;


public class TodoItem {

    private static final String TODOLIST_TABLE_NAME = System.getenv("TODO_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    private Logger logger = Logger.getLogger(this.getClass());


    private String id;
    private String text;
    private boolean checked;
    private long createdAt;
    private long updatedAt;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "text")
    public String getText() {
        return text;
    }
    public void setText(String text) {
        this.text = text;
    }

    @DynamoDBAttribute(attributeName = "checked")
    public boolean isChecked() {
        return checked;
    }
    public void setChecked(boolean checked) {
        this.checked = checked;
    }

    @DynamoDBAttribute(attributeName = "createdAt")
    public long getCreatedAt() {
        return createdAt;
    }
    public void setCreatedAt(long createdAt) {
        this.createdAt = createdAt;
    }

    @DynamoDBAttribute(attributeName = "updatedAt")
    public long getUpdatedAt() {
        return updatedAt;
    }
    public void setUpdatedAt(long updatedAt) {
        this.updatedAt = updatedAt;
    }

    // CONSTRUCTOR

    public TodoItem() {

        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TODOLIST_TABLE_NAME))
                .build();

        // get the db adapter
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = db_adapter.createDbMapper(mapperConfig);
    }

    // REST METHODS HERE
    public void save(TodoItem todoItem) {
        logger.info("ToDoList - save(): " + todoItem.toString());
        this.mapper.save(todoItem);
    }

    public void update(TodoItem todoItem){
        save(todoItem);

    }


    public List<TodoItem> list() {

        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<TodoItem> results = this.mapper.scan(TodoItem.class, scanExp);
        for (TodoItem i : results) {
            logger.info("TodoItem - list(): " + i.toString());
        }
        return results;

    }


    public TodoItem get(String id) {

        TodoItem todoItem = null;
        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<TodoItem> queryExp = new DynamoDBQueryExpression<TodoItem>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<TodoItem> result = this.mapper.query(TodoItem.class, queryExp);

        if (result.size() > 0) {
            todoItem = result.get(0);
            logger.info("Todo - get(): todo item - " + todoItem.toString());
        } else {
            logger.info("Todo - get(): todo item - Not Found.");
        }

        return todoItem;

    }

    public Boolean delete(String id) {
        TodoItem todoItem = null;

        // get todoitem if exists
        todoItem = get(id);
        if (todoItem != null) {
            logger.info("Todo - delete(): " + todoItem.toString());
            this.mapper.delete(todoItem);
        } else {
            logger.info("ToDoItem - delete(): todoitem - does not exist.");
            return false;
        }
        return true;
    }

    // TODO: UPDATE


    @Override
    public String toString() {
        return String.format("TodoItem [id=%s, text=%s, checked=%b, updatedAt=%s, createdAt=%s]", this.id, this.text, this.checked, this.createdAt, this.updatedAt);

    }
}
