# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: java-todo-api # NOTE: update this with your service name

custom:
  todoTableName: 'java-todo-${self:provider.stage}'

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'java-dev'}
  region: ${opt:region, 'eu-west-2'}
  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.todoTableName}"

  environment:
    TODO_TABLE_NAME: ${self:custom.todoTableName}


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
#  hello:
#    handler: com.serverless.Handler
  createTodo512:
    handler: com.serverless.CreateTodoItemHandler
    memorySize: 512
    events:
    - http:
        path: /todos512
        method: post
#        private: true
  createTodo1024:
    handler: com.serverless.CreateTodoItemHandler
    memorySize: 1024
    events:
    - http:
        path: /todos1024
        method: post
#        private: true
  createTodo2048:
    handler: com.serverless.CreateTodoItemHandler
    memorySize: 2048
    events:
    - http:
        path: /todos2048
        method: post
#        private: true
  createTodo:
    handler: com.serverless.CreateTodoItemHandler
    events:
    - http:
        path: /todos
        method: post
#        private: true
  getTodo:
    handler: com.serverless.GetTodoItemHandler
    events:
    - http:
        path: /todos/{id}
        method: get
#        private: true
  listTodos:
    handler: com.serverless.ListTodoItemHandler
    events:
    - http:
        path: /todos/
        method: get
#        private: true
  updateTodo:
    handler: com.serverless.UpdateTodoItemHandler
    events:
    - http:
        path: /todos/{id}
        method: put
  #        private: true
  deleteTodo:
    handler: com.serverless.DeleteTodoItemHandler
    events:
    - http:
        path: /todos/{id}
        method: delete
#        private: true
resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.todoTableName}
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
